Trainer github
https://github.com/joydip-git/siemens-ng-30thJan2023

download vs code and node.js LTS

vs code extensions
------------------------------
liveserver
Angular Language Service


- EVERYTHING IS A FUNCTION IN JS
- js is a dynamic language
- js is single threaded
- js is a object based programming language not an object orientied programming language
var x=100;
x="joydip
constructor function
- function starts in global function execution context
- js hoisting - registration of declared varirables and functions
- preperation and execution two phases js execution phase
- this, vo,scope  objects in execution context ( oc itself as object)
- js closure - lexical environement of outer scopes.
- js prototype object - object for not called objects
- inner function has access to outer scope objects
- 'use strict' - this values are not linked to any default object (window or global)
- to define a new object or not link this to any global object use new keyword to create objects
e.g. new person()
- 'new' will make sure event property with this is created and have a fresh copy for each object
- function object is base object for every object u create in js
- execution context is created whenever function is called
- Top level base object has constructor and prototype
- for base object constructor links to same object constructor and prototype is null
- any object u create creates a prototype property from prototype object (Person prototype)
- base Person prototype has object as base
- person.prototype is reference to base personprototype
- object is linked with prototype chain



node.js runtime to run js code without any html 
and create desktop based applicaiton - can also used for server side
purpose -
- node is a js engine to run js
- doesn't support window and document
- no html required
- node can run my javascript without using html  "node index.js"
- can be used for desktop based application e.g file reading and file writing
- oppurtunity backend server logic as well

Ts:
- static type checking
- strict typing

npm install -g typescript
npm -> install third party node packages
global npm packages are stored here
C:\Users\[userid]\appdata\Roaming\npm
e.g. C:\Users\z003uuxe\appdata\Roaming\npm

- tsc is a node based tool
- tsc --init

"define the script in package.json
and run npm run build

require js is used to define one index.js
RequireJS is a JavaScript file and module loader
resolve the modules with a single file

all the steps to web app with Ts
----------------------------------------------
-> npm --init --yes -> creates a package.json
-> npm i typescript -D ->install tsc
-> tsc --int -> creates a tsconfig.json file
-> specify configuration in tsconfig.json
-> npm run scriptname

npm i lite-server -D

- callback, calls my function once the exectuion is done
- Eventloop - service worker
- promise

promise
initial state
---------------
state: pending
result: undefined

success:
----------
state: fulfilled/resolved
result: values

failure:
---------
state: rejected
result:undefined

async await is a wrapper for promise
-nodejs might spawn extra thread for promises
- function type in ts - callback can be typefied.
type callbackType = (err:Err | undefined, res:number | undefined)=> void


transpilation
module loader to load all modules to index.

Angular
--------------------------
tool to do transpilation
 and module loader 
 developer cli
 -server to run the package 
 and do other configuriaton like tsconfig, package.json exectuion
known as angular cli

- npm i @angular/cli -g
- ng version
- installed at C:\Users\z003uuxe\appdata\Roaming\npm
- new app => ng new ng-first-app
- jasmine is the test framwork
- karma test runtime
- rxjs - reactive extenstion to javascript - asynchrnous programming - observable and observer object
- Reactivex.io

- component - has design
- directive
    - *ngX or *X => structural directive
    - X => attribute directive
    - component directive : @Component 
- pipe
- service
- module
all of them are defined as class with Decoratos like attribute in .net
- component decorator start with @
e.g. @Component(), @directive, @pipe, @Injectable, @NgModule

binding
- {{property-of-code}} - interpolation => converts the property value to the string
- <element [attribute-name]="property-of-code" - property binding => retains original type of the property value

(event-name)="method-of-component(args)"
- change detection strategy - any change in component property is notified to UI, simillar to onproperty changed in wpf

- directive is used to extend the behavior of html element

ng g m calculator
ng g c calculator/components/calculations - create calcultions component inside
calculator/components directory


Day 3
----------------------
  - npm i bootstrap
  - update the angular.json
   "styles": [
              "./node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
            ],

  - Modules:APP
    ----------------------------------
    app.module.ts
    common-features - to organize components for features but regsitered with app module only
      components
         Dashboard
            - dashboard.component.html+css+ts
         Home 
            - home.component.html+css+ts

ng command:
 ng g c common-features/component/dashboard --skip-tests
 ng g c common-features/component/home --skip-tests
     ----------------------------------


    Modules: Products
    ----------------------------------
         products.module.ts
         components
           add-product
              add-product.component
            product-list
              product-list.component.*
            filter-product
            product-container holds product-list and filter-product

    Pipes
       filter-product.pipe.ts

    Services
       product.service.ts
    ----------------------------------
ng
ng g m products    
ng g c products/components/add-product --skip-tests
ng g c products/components/product-list --skip-tests
ng g c products/components/filter-product --skip-tests
ng g c products/components/product-container --skip-tests

- dependency injection of service
  asset level
  module level
  top module level
component life cycle
 - init
 - change
 - destory
 - activate
 - activated
     










